plugins {
  id "com.github.ben-manes.versions" version "$versionsVersion"
  id "com.github.johnrengelman.shadow" version "$shadowVersion"
  id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
}

apply plugin: 'eclipse'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'com.foilen'
version = System.getenv('VERSION')?:'master-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenLocal()
  mavenCentral()
}

sourceCompatibility = 11

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
  }
}

eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = true
  }
}

configurations {
  testCompile.extendsFrom compileOnly
}

dependencies {
  implementation ("com.foilen:database-tools:$foilenDatabaseToolsVersion") { transitive = false }
  api ("org.shredzone.acme4j:acme4j-client:$acme4jVersion")
  api ("org.shredzone.acme4j:acme4j-utils:$acme4jVersion")
  
  compileOnly "com.foilen:foilen-infra-system-core-system-memory:$foilenInfraSystemVersion"
  
  testRuntimeOnly 'ch.qos.logback:logback-classic'
  testImplementation "com.foilen:foilen-infra-system-core-system-junits:$foilenInfraSystemVersion"
  testImplementation "com.foilen:foilen-infra-system-core-system-memory:$foilenInfraSystemVersion"
  testImplementation 'junit:junit'
  testImplementation 'org.freemarker:freemarker'
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
}

test {
  useJUnitPlatform()
}

shadowJar {
  
  archiveClassifier.set(null)
  
  dependencies {
    exclude(dependency('org.slf4j:slf4j-api:1.7.26'))
    exclude(dependency('org.bouncycastle:bcprov-jdk15on:1.61'))
    exclude(dependency('org.bouncycastle:bcpkix-jdk15on:1.61'))
  }
  
}

java {
  withJavadocJar()
  withSourcesJar()
}

publishing {
  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = System.getenv('OSSRH_USER')
        password = System.getenv('OSSRH_PASS')
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      pom {
        name = "foilen-infra-plugins-core"
        description = 'The basics resources with their validations'
        url = 'https://github.com/foilen/foilen-infra-plugins-core'
        from components.java
        
        scm {
          connection = "scm:git:git@github.com:foilen/foilen-infra-plugins-core.git"
          url = "https://github.com/foilen/foilen-infra-plugins-core"
        }

        licenses {
          license {
            name = "MIT"
            url = "https://opensource.org/licenses/MIT"
          }
        }

        developers {
          developer {
            id = 'foilen'
            name = 'Simon Levesque'
            email = 'simon@foilen.com'
          }
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}
tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

task outputVersion {
  doLast {
    mkdir("$buildDir/resources/main/")
    file("$buildDir/resources/main/foilen-infra-plugins-core.txt").text = "$version"
  }
}
processResources.dependsOn outputVersion

publishToMavenLocal.dependsOn shadowJar
publish.dependsOn shadowJar
