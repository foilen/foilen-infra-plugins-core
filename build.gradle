plugins {
  id "com.github.ben-manes.versions" version "$versionsVersion"
  id "com.github.johnrengelman.shadow" version "$shadowVersion"
  id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.foilen'
version = System.getenv('VERSION')?:'master-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
  mavenLocal()
  mavenCentral()
}

sourceCompatibility = 11

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-starter-parent:$springBootVersion"
  }
}

eclipse {
  classpath {
    downloadSources = true
    downloadJavadoc = true
  }
}

configurations {
  testCompile.extendsFrom compileOnly
}

dependencies {
  compile ("com.foilen:database-tools:$foilenDatabaseToolsVersion") { transitive = false }
  compile ("org.shredzone.acme4j:acme4j-client:$acme4jVersion")
  compile ("org.shredzone.acme4j:acme4j-utils:$acme4jVersion")
  
  compileOnly "com.foilen:foilen-infra-system-core-system-memory:$foilenInfraSystemVersion"
  
  testRuntimeOnly 'ch.qos.logback:logback-classic'
  testCompile "com.foilen:foilen-infra-system-core-system-junits:$foilenInfraSystemVersion"
  testCompile "com.foilen:foilen-infra-system-core-system-memory:$foilenInfraSystemVersion"
  testCompileOnly 'junit:junit'
  testCompile 'org.freemarker:freemarker'
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
}

test {
  useJUnitPlatform()
}

shadowJar {
  configurations = [project.configurations.compile]
  
  archiveClassifier.set(null)
  
  dependencies {
    exclude(dependency('org.slf4j:slf4j-api:1.7.26'))
    exclude(dependency('org.bouncycastle:bcprov-jdk15on:1.61'))
    exclude(dependency('org.bouncycastle:bcpkix-jdk15on:1.61'))
  }
  
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { isReleaseVersion && gradle.taskGraph.hasTask(":uploadArchives") }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: System.getenv('OSSRH_USER'), password: System.getenv('OSSRH_PASS'))
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: System.getenv('OSSRH_USER'), password: System.getenv('OSSRH_PASS'))
      }

      pom.project {
        name = "foilen-infra-plugins-core"
        packaging 'jar'
        artifactId 'foilen-infra-plugins-core'
        description 'The basics resources with their validations'
        url 'https://github.com/foilen/foilen-infra-plugins-core'

        scm {
          connection = "scm:git:git@github.com:foilen/foilen-infra-plugins-core.git"
          url = "https://github.com/foilen/foilen-infra-plugins-core"
        }

        licenses {
          license {
            name = "MIT"
            url = "https://opensource.org/licenses/MIT"
          }
        }

        developers {
          developer {
            id 'foilen'
            name 'Simon Levesque'
            email 'simon@foilen.com'
          }
        }
      }
    }
  }
}

task outputVersion {
  doLast {
    mkdir("$buildDir/resources/main/")
    file("$buildDir/resources/main/foilen-infra-plugins-core.txt").text = "$version"
  }
}
processResources.dependsOn outputVersion

install.dependsOn shadowJar
uploadArchives.dependsOn shadowJar
